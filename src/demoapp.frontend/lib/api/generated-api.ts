//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = process.env.NEXT_PUBLIC_BACKEND_URL ?? "";
    }

    /**
     * @return OK
     */
    getWeatherForecast(): Promise<WeatherForecastResponse> {
        let url_ = this.baseUrl + "/api/weatherforecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetWeatherForecast(_response);
        });
    }

    protected processGetWeatherForecast(response: Response): Promise<WeatherForecastResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WeatherForecastResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WeatherForecastResponse>(null as any);
    }
}

export class ForecastResponse implements IForecastResponse {
    date?: string | undefined;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IForecastResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.temperatureC = _data["temperatureC"];
            this.temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): ForecastResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ForecastResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IForecastResponse {
    date?: string | undefined;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

export class HourlyForecastResponse implements IHourlyForecastResponse {
    hour?: string | undefined;
    summary?: string | undefined;
    temperatureC?: number;
    readonly temperatureF?: number;

    constructor(data?: IHourlyForecastResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hour = _data["hour"];
            this.summary = _data["summary"];
            this.temperatureC = _data["temperatureC"];
            (<any>this).temperatureF = _data["temperatureF"];
        }
    }

    static fromJS(data: any): HourlyForecastResponse {
        data = typeof data === 'object' ? data : {};
        let result = new HourlyForecastResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hour"] = this.hour;
        data["summary"] = this.summary;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        return data;
    }
}

export interface IHourlyForecastResponse {
    hour?: string | undefined;
    summary?: string | undefined;
    temperatureC?: number;
    temperatureF?: number;
}

export class WeatherForecastResponse implements IWeatherForecastResponse {
    location?: string | undefined;
    todaysForecast?: HourlyForecastResponse[] | undefined;
    weeklyForecast?: ForecastResponse[] | undefined;

    constructor(data?: IWeatherForecastResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.location = _data["location"];
            if (Array.isArray(_data["todaysForecast"])) {
                this.todaysForecast = [] as any;
                for (let item of _data["todaysForecast"])
                    this.todaysForecast!.push(HourlyForecastResponse.fromJS(item));
            }
            if (Array.isArray(_data["weeklyForecast"])) {
                this.weeklyForecast = [] as any;
                for (let item of _data["weeklyForecast"])
                    this.weeklyForecast!.push(ForecastResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WeatherForecastResponse {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecastResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["location"] = this.location;
        if (Array.isArray(this.todaysForecast)) {
            data["todaysForecast"] = [];
            for (let item of this.todaysForecast)
                data["todaysForecast"].push(item.toJSON());
        }
        if (Array.isArray(this.weeklyForecast)) {
            data["weeklyForecast"] = [];
            for (let item of this.weeklyForecast)
                data["weeklyForecast"].push(item.toJSON());
        }
        return data;
    }
}

export interface IWeatherForecastResponse {
    location?: string | undefined;
    todaysForecast?: HourlyForecastResponse[] | undefined;
    weeklyForecast?: ForecastResponse[] | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}